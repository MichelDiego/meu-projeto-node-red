[
    {
        "id": "d2238cf3bf6a3390",
        "type": "tab",
        "label": "Fluxo 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ad317ce82a8a2ae7",
        "type": "tab",
        "label": "Fluxo 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e1d7f2d534b1a359",
        "type": "tab",
        "label": "Fluxo 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a08de68dd8c3c8b9",
        "type": "mqtt-broker",
        "name": "TEMPERATURA",
        "broker": "ae0rnk6x00vf-ats.iot.us-east-1.amazonaws.com",
        "port": "8883",
        "tls": "882205b8f8c91187",
        "clientid": "ClientEsp",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "882205b8f8c91187",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "Device Certicate.pem.crt",
        "keyname": "Private Key.key",
        "caname": "AmazonRootCA1.pem",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "5eb6859dbbca014e",
        "type": "MySQLdatabase",
        "name": "TEMPERATURADB",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "SCADA",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "d4ba1d99346adfe8",
        "type": "MySQLdatabase",
        "name": "scada",
        "host": "192.168.1.7",
        "port": "3306",
        "db": "scada",
        "tz": "",
        "charset": "LATIN1"
    },
    {
        "id": "9729489c6e8f2982",
        "type": "json2mysql-server",
        "host": "localhost",
        "database": "SCADA",
        "user": "MichelDiego",
        "password": "1234"
    },
    {
        "id": "f2e4b9787916b132",
        "type": "MySQLdatabase",
        "name": "",
        "host": "192.168.1.7",
        "port": "3306",
        "db": "SCADA",
        "tz": "",
        "charset": "LATIN1",
        "info": "msg.topic = \"SELECT * FROM senordata\";\r\nreturn msg;\r\n"
    },
    {
        "id": "2a46675a2b1198a0",
        "type": "MySQL-Server-Connector",
        "name": "",
        "host": "192.168.1.7",
        "port": "3306",
        "user": "root",
        "password": "96528107",
        "tls": false,
        "database": "scada"
    },
    {
        "id": "f0508c120dae33cf",
        "type": "ui-base",
        "name": "My Dashboard",
        "path": "/dashboard",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "navigationStyle": "temporary"
    },
    {
        "id": "1e5513c968c80646",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094CE",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "717495b2f9a5bcd1",
        "type": "ui-page",
        "name": "TCC Node-RED",
        "ui": "f0508c120dae33cf",
        "path": "/pageN",
        "icon": "home",
        "layout": "grid",
        "theme": "1e5513c968c80646",
        "order": -1,
        "className": "",
        "visible": false,
        "disabled": false
    },
    {
        "id": "70f4010ab4c33367",
        "type": "ui-group",
        "name": "Analise Node-RED",
        "page": "717495b2f9a5bcd1",
        "width": "3",
        "height": "1",
        "order": -1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "4b95948c45e709f9",
        "type": "ui-group",
        "name": "Grafico Node-RED",
        "page": "717495b2f9a5bcd1",
        "width": "7",
        "height": "1",
        "order": -1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "47decec479a88a6c",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094CE",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "49e28da9fdacfd0c",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094CE",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "1a7985245c4620ae",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "d77ec9c61e0f0e34",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094CE",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "edce0dc7df912ebd",
        "type": "mui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "m-base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "m-page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "m-page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "m-page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "m-group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "m-group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "m-group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "m-widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "m-widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "m-widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "025913cb225584b5",
        "type": "mui_group",
        "name": "mGroup 1",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": 6
    },
    {
        "id": "e43fb2a0cbb41c2f",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094CE",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "465253ab060beb87",
        "type": "ui_group",
        "name": "Analise-teste2",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "278e7cbb4b6ca36c",
        "type": "ui_tab",
        "name": "TCC",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "861ded1dc585b7be",
        "type": "ui_group",
        "name": "TESTETCC",
        "tab": "278e7cbb4b6ca36c",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "733f4fc23c624005",
        "type": "ui_group",
        "name": "PERIFERICOS",
        "tab": "278e7cbb4b6ca36c",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ce24d80c1545ec19",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094CE",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "dd8eb64436474558",
        "type": "ui-group",
        "name": "LEDS",
        "page": "717495b2f9a5bcd1",
        "width": "2",
        "height": "1",
        "order": -1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "3ed1f547229aed05",
        "type": "ui_tab",
        "name": "Tab 2",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "c6155cd530410d7a",
        "type": "function",
        "z": "d2238cf3bf6a3390",
        "name": "function 3",
        "func": "// Extrair o valor de msg.payload\nvar value = msg.payload.value;\n\n// Atribuir apenas o valor ao payload\nmsg.payload = value;\n\n// Retornar a mensagem com o valor ajustado\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "92099adf65d11915",
        "type": "mqtt in",
        "z": "d2238cf3bf6a3390",
        "name": "",
        "topic": "esp32/pub/liquido",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "a08de68dd8c3c8b9",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 80,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "64f45eb440551678",
        "type": "function",
        "z": "d2238cf3bf6a3390",
        "name": "function 6",
        "func": "// Verifica se a mensagem contém a propriedade 'value' e se é um número\nif (msg.payload && typeof msg.payload.value === 'number') {\n    // Retorna apenas o valor\n    return { payload: msg.payload.value };\n} else {\n    // Se não houver 'value' na mensagem ou se não for um número, retorna uma mensagem de erro\n    return { error: \"Valor não encontrado na mensagem\" };\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 360,
        "wires": [
            [
                "7d2137ac591b5a55"
            ]
        ]
    },
    {
        "id": "2129e430459d7dc5",
        "type": "mqtt in",
        "z": "d2238cf3bf6a3390",
        "name": "",
        "topic": "esp32/pub/temperatura",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "a08de68dd8c3c8b9",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 80,
        "wires": [
            [
                "def01f3cbd3aeaec",
                "0921721d3a0da091"
            ]
        ]
    },
    {
        "id": "cf165392f1237c9f",
        "type": "debug",
        "z": "d2238cf3bf6a3390",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 20,
        "wires": []
    },
    {
        "id": "def01f3cbd3aeaec",
        "type": "csv",
        "z": "d2238cf3bf6a3390",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "value,timestamp",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 370,
        "y": 80,
        "wires": [
            [
                "52809598db25e0de"
            ]
        ]
    },
    {
        "id": "26235d8fdb28a61f",
        "type": "mysql",
        "z": "d2238cf3bf6a3390",
        "mydb": "d4ba1d99346adfe8",
        "name": "SQL",
        "x": 750,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "0398897dfc528a0a",
        "type": "function",
        "z": "d2238cf3bf6a3390",
        "name": "SQL",
        "func": "// Extrair o valor e o carimbo de data/hora do resultado da consulta\nvar value = msg.payload.value;\nvar timestamp = msg.payload.timestamp;\n\n// Criar um novo objeto para conter value e timestamp\nmsg.payload = {\n    value: value,\n    timestamp: timestamp\n};\n\n// Retornar a mensagem ajustada\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 280,
        "wires": [
            [
                "64f45eb440551678"
            ]
        ]
    },
    {
        "id": "f15d9cf8aed8dc08",
        "type": "debug",
        "z": "d2238cf3bf6a3390",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 420,
        "wires": []
    },
    {
        "id": "90f80e361221be2e",
        "type": "csv",
        "z": "d2238cf3bf6a3390",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "value,timestamp",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 350,
        "y": 280,
        "wires": [
            [
                "0398897dfc528a0a"
            ]
        ]
    },
    {
        "id": "75b11bb615e33d18",
        "type": "mysql",
        "z": "d2238cf3bf6a3390",
        "mydb": "d4ba1d99346adfe8",
        "name": "SQL",
        "x": 630,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "52809598db25e0de",
        "type": "function",
        "z": "d2238cf3bf6a3390",
        "name": "SQLT",
        "func": "var value = msg.payload.value;\nvar timestamp = msg.payload.timestamp;\nvar sensor = \"TEMPERATURA\"; \nvar location = \"LAB\";\n\n// Montar o objeto payload com os dados\nmsg.payload = {\n    value: value,\n    timestamp: timestamp,\n    location: location,\n    sensor: sensor\n};\n\n// Definir a consulta SQL para buscar os dados do banco de dados\nmsg.topic = \"SELECT value, timestamp FROM senordata ORDER BY id DESC LIMIT 1\";\n\n// Retornar a mensagem para o próximo nó no fluxo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "d9516e0cf5addc16",
        "type": "function",
        "z": "d2238cf3bf6a3390",
        "name": "RETORNO-L",
        "func": "// Extrair o valor e o carimbo de data/hora do resultado da consulta\nvar value = msg.payload[0].value;\nvar timestamp = msg.payload[0].timestamp;\n\n// Criar um novo objeto para conter value e timestamp\nmsg.payload = {\n    value: value,\n    timestamp: timestamp\n};\n\n// Retornar a mensagem ajustada\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "eeec0e157758e358",
        "type": "function",
        "z": "d2238cf3bf6a3390",
        "name": "RETORNO-T",
        "func": "// Supondo que os dados estejam em msg.payload\nvar values = [];\nvar timestamps = [];\n\n// Verificar se msg.payload está definido e não é vazio\nif (msg.payload && msg.payload.length > 0) {\n    // Percorrer os objetos em msg.payload e extrair os valores e timestamps\n    msg.payload.forEach(function(item) {\n        values.push(item.value);\n        timestamps.push(new Date(item.timestamp).getTime());\n    });\n}\n\n// Formatar os dados no formato adequado para o nó do gráfico\nvar chartData = [{\n    series: [\"Value\"],\n    data: [values],\n    labels: timestamps\n}];\n\n// Passar os dados formatados para o nó do gráfico\nmsg.payload = chartData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "0921721d3a0da091",
        "type": "function",
        "z": "d2238cf3bf6a3390",
        "name": "function 7",
        "func": "// Verifica se a mensagem contém a propriedade 'value' e se é um número\nif (msg.payload && typeof msg.payload.value === 'number') {\n    // Retorna apenas o valor\n    return { payload: msg.payload.value };\n} else {\n    // Se não houver 'value' na mensagem ou se não for um número, retorna uma mensagem de erro\n    return { error: \"Valor não encontrado na mensagem\" };\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "7d2137ac591b5a55",
        "type": "function",
        "z": "d2238cf3bf6a3390",
        "name": "function 8",
        "func": "// Converte o payload para uma string para verificar o tipo de unidade\nvar payloadString = String(msg.payload);\n\n// Verifica se o valor é maior que 999\nif (payloadString.includes(\"L\")) {\n    // Se o valor for em litros\n    var value = parseFloat(payloadString); // Converte o valor para um número\n    if (value > 999) {\n        // Se o valor for maior que 999, converte para litros\n        value = value / 1000; // Converte para litros\n        msg.payload = value.toFixed(2); // Arredonda para 2 casas decimais e atualiza o payload com o novo valor em litros\n    } else {\n        // Se o valor for até 999, mantém em mililitros\n        msg.payload = value.toFixed(0); // Arredonda para 0 casas decimais e atualiza o payload com o novo valor em mililitros\n    }\n} else if (payloadString.includes(\"mL\")) {\n    // Se o valor for em mililitros\n    var value = parseFloat(payloadString); // Converte o valor para um número\n    if (value > 999) {\n        // Se o valor for maior que 999, converte para litros\n        value = value / 1000; // Converte para litros\n        msg.payload = value.toFixed(2); // Arredonda para 2 casas decimais e atualiza o payload com o novo valor em litros\n    } else {\n        // Se o valor for até 999, mantém em mililitros\n        msg.payload = value.toFixed(0); // Arredonda para 0 casas decimais e atualiza o payload com o novo valor em mililitros\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "c8e3a5776e5e9a0f",
        "type": "mqtt in",
        "z": "ad317ce82a8a2ae7",
        "name": "",
        "topic": "esp32/pub/liquido",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "a08de68dd8c3c8b9",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 360,
        "wires": [
            [
                "43166c293116156c"
            ]
        ]
    },
    {
        "id": "18e4990bb86f5d8d",
        "type": "function",
        "z": "ad317ce82a8a2ae7",
        "name": "function 14",
        "func": "// Verifica se a mensagem contém a propriedade 'value' e se é um número\nif (msg.payload && typeof msg.payload.value === 'number') {\n    // Retorna apenas o valor\n    return { payload: msg.payload.value };\n} else {\n    // Se não houver 'value' na mensagem ou se não for um número, retorna uma mensagem de erro\n    return { error: \"Valor não encontrado na mensagem\" };\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 360,
        "wires": [
            [
                "be75189d52060222",
                "f5c4fa25efc46bb3",
                "93be949d9df4aa2f",
                "2cae452dfdd5318c",
                "c7f71f32fe895e7c"
            ]
        ]
    },
    {
        "id": "e38de58697b445b1",
        "type": "mqtt in",
        "z": "ad317ce82a8a2ae7",
        "name": "",
        "topic": "esp32/pub/temperatura",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "a08de68dd8c3c8b9",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 40,
        "wires": [
            [
                "fa3d9d0b4c463ced"
            ]
        ]
    },
    {
        "id": "fa3d9d0b4c463ced",
        "type": "csv",
        "z": "ad317ce82a8a2ae7",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "value,timestamp",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 460,
        "y": 40,
        "wires": [
            [
                "8ec52980a652408c"
            ]
        ]
    },
    {
        "id": "ea4101bb2642d7f9",
        "type": "mysql",
        "z": "ad317ce82a8a2ae7",
        "mydb": "d4ba1d99346adfe8",
        "name": "SQL",
        "x": 970,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "3b73695f7c70868a",
        "type": "function",
        "z": "ad317ce82a8a2ae7",
        "name": "SQL",
        "func": "// Extrair o valor e o carimbo de data/hora do resultado da consulta\nvar value = msg.payload.value;\nvar timestamp = msg.payload.timestamp;\n\n// Criar um novo objeto para conter value e timestamp\nmsg.payload = {\n    value: value,\n    timestamp: timestamp\n};\n\n// Retornar a mensagem ajustada\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 360,
        "wires": [
            [
                "18e4990bb86f5d8d"
            ]
        ]
    },
    {
        "id": "43166c293116156c",
        "type": "csv",
        "z": "ad317ce82a8a2ae7",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "value,timestamp",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 330,
        "y": 360,
        "wires": [
            [
                "3b73695f7c70868a"
            ]
        ]
    },
    {
        "id": "2d894c64ef60860f",
        "type": "mysql",
        "z": "ad317ce82a8a2ae7",
        "mydb": "d4ba1d99346adfe8",
        "name": "SQL",
        "x": 840,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "8ec52980a652408c",
        "type": "function",
        "z": "ad317ce82a8a2ae7",
        "name": "SQLT",
        "func": "var value = msg.payload.value;\nvar timestamp = msg.payload.timestamp;\nvar sensor = \"TEMPERATURA\"; \nvar location = \"LAB\";\n\n// Montar o objeto payload com os dados\nmsg.payload = {\n    value: value,\n    timestamp: timestamp,\n    location: location,\n    sensor: sensor\n};\n\n// Definir a consulta SQL para buscar os dados do banco de dados\nmsg.topic = \"SELECT value, timestamp FROM senordata ORDER BY id DESC LIMIT 1\";\n\n// Retornar a mensagem para o próximo nó no fluxo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 40,
        "wires": [
            [
                "3df1c0184c0782b7"
            ]
        ]
    },
    {
        "id": "1db38d45409c091e",
        "type": "function",
        "z": "ad317ce82a8a2ae7",
        "name": "RETORNO-L",
        "func": "// Extrair o valor e o carimbo de data/hora do resultado da consulta\nvar value = msg.payload[0].value;\nvar timestamp = msg.payload[0].timestamp;\n\n// Criar um novo objeto para conter value e timestamp\nmsg.payload = {\n    value: value,\n    timestamp: timestamp\n};\n\n// Retornar a mensagem ajustada\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "3df1c0184c0782b7",
        "type": "function",
        "z": "ad317ce82a8a2ae7",
        "name": "function 15",
        "func": "// Verifica se a mensagem contém a propriedade 'value' e se é um número\nif (msg.payload && typeof msg.payload.value === 'number') {\n    // Retorna apenas o valor\n    return { payload: msg.payload.value };\n} else {\n    // Se não houver 'value' na mensagem ou se não for um número, retorna uma mensagem de erro\n    return { error: \"Valor não encontrado na mensagem\" };\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 40,
        "wires": [
            [
                "824196d6617a58ef",
                "ab9d936ded3bbb2b",
                "c301caaa261c9991",
                "26c7cf130f9b7783",
                "0c7b27b8d0182ddd"
            ]
        ]
    },
    {
        "id": "4593f1bde0271abf",
        "type": "ui-led",
        "z": "ad317ce82a8a2ae7",
        "name": "TempVerd",
        "group": "dd8eb64436474558",
        "order": 3,
        "width": "1",
        "height": "2",
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "states": [
            {
                "value": "true",
                "valueType": "bool",
                "color": "#00ff00"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showBorder": true,
        "showGlow": true,
        "x": 460,
        "y": 140,
        "wires": []
    },
    {
        "id": "bf4bc82896bf0863",
        "type": "ui-led",
        "z": "ad317ce82a8a2ae7",
        "name": "TempVerm",
        "group": "dd8eb64436474558",
        "order": 4,
        "width": "1",
        "height": "2",
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "states": [
            {
                "value": "true",
                "valueType": "bool",
                "color": "#ff0000"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showBorder": true,
        "showGlow": true,
        "x": 450,
        "y": 80,
        "wires": []
    },
    {
        "id": "762d28d666b7b8a2",
        "type": "ui-chart",
        "z": "ad317ce82a8a2ae7",
        "group": "4b95948c45e709f9",
        "name": "ChartTemper",
        "label": "ºC",
        "order": 2,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "time",
        "yAxisProperty": "",
        "ymin": "0",
        "ymax": "100",
        "action": "append",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": "30",
        "removeOlderUnit": "1",
        "removeOlderPoints": "",
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": "7",
        "height": "4",
        "className": "",
        "x": 1150,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "93be949d9df4aa2f",
        "type": "ui-gauge",
        "z": "ad317ce82a8a2ae7",
        "name": "",
        "group": "70f4010ab4c33367",
        "order": 1,
        "width": 3,
        "height": "4",
        "gtype": "gauge-34",
        "gstyle": "needle",
        "title": "Nível de Líquido",
        "units": "",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ff0000"
            },
            {
                "from": "500",
                "color": "#ff6600"
            },
            {
                "from": "900",
                "color": "#eeff00"
            },
            {
                "from": "1400",
                "color": "#04ff00"
            }
        ],
        "min": 0,
        "max": "1800",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 920,
        "y": 440,
        "wires": []
    },
    {
        "id": "dea5ea40bea63824",
        "type": "ui-led",
        "z": "ad317ce82a8a2ae7",
        "name": "LiquidVerd",
        "group": "dd8eb64436474558",
        "order": 1,
        "width": "1",
        "height": "2",
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "states": [
            {
                "value": "true",
                "valueType": "bool",
                "color": "#00ff00"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showBorder": true,
        "showGlow": true,
        "x": 460,
        "y": 440,
        "wires": []
    },
    {
        "id": "fd3b86f75c13a0e4",
        "type": "ui-led",
        "z": "ad317ce82a8a2ae7",
        "name": "LiquidpVerm",
        "group": "dd8eb64436474558",
        "order": 2,
        "width": "1",
        "height": "2",
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "states": [
            {
                "value": "true",
                "valueType": "bool",
                "color": "#ff0000"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showBorder": true,
        "showGlow": true,
        "x": 460,
        "y": 480,
        "wires": []
    },
    {
        "id": "5dac5a78f557d0cf",
        "type": "ui-led",
        "z": "ad317ce82a8a2ae7",
        "name": "BombaVerd",
        "group": "dd8eb64436474558",
        "order": 5,
        "width": "1",
        "height": "2",
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "states": [
            {
                "value": "true",
                "valueType": "bool",
                "color": "#00ff00"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showBorder": true,
        "showGlow": true,
        "x": 810,
        "y": 740,
        "wires": []
    },
    {
        "id": "0faaadfb0c42f36a",
        "type": "ui-led",
        "z": "ad317ce82a8a2ae7",
        "name": "BombaVerm",
        "group": "dd8eb64436474558",
        "order": 6,
        "width": "1",
        "height": "2",
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "states": [
            {
                "value": "false",
                "valueType": "bool",
                "color": "#ff0000"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showBorder": true,
        "showGlow": true,
        "x": 810,
        "y": 780,
        "wires": []
    },
    {
        "id": "824196d6617a58ef",
        "type": "function",
        "z": "ad317ce82a8a2ae7",
        "name": "Tempvermelha",
        "func": "// Esta função é chamada quando uma mensagem é recebida\nvar nivel = msg.payload; // Assume que o valor recebido é um número representando o nível de líquido\n\n// Verifica se o valor recebido é um número e se é maior que 500\nif (!isNaN(nivel) && nivel > 35) {\n    // Se o valor for maior que 500, acende a LED\n    msg.payload = true; // Sinaliza para acender a LED\n} else {\n    // Se o valor não for maior que 500, apaga a LED\n    msg.payload = false; // Sinaliza para apagar a LED\n}\n\n// Define o tópico para controlar a LED\nmsg.topic = \"topic/LED\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 80,
        "wires": [
            [
                "bf4bc82896bf0863"
            ]
        ]
    },
    {
        "id": "ab9d936ded3bbb2b",
        "type": "function",
        "z": "ad317ce82a8a2ae7",
        "name": "TempVerd",
        "func": "// Esta função é chamada quando uma mensagem é recebida\nvar nivel = msg.payload; // Assume que o valor recebido é um número representando o nível de líquido\n\n// Verifica se o valor recebido é um número e se é menor que 500\nif (!isNaN(nivel) && nivel < 35) {\n    // Se o valor for menor que 500, acende a LED\n    msg.payload = true; // Sinaliza para acender a LED\n} else {\n    // Se o valor não for menor que 500, apaga a LED\n    msg.payload = false; // Sinaliza para apagar a LED\n}\n\n// Define o tópico para controlar a LED\nmsg.topic = \"topic/LED\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 140,
        "wires": [
            [
                "4593f1bde0271abf"
            ]
        ]
    },
    {
        "id": "c301caaa261c9991",
        "type": "ui-gauge",
        "z": "ad317ce82a8a2ae7",
        "name": "",
        "group": "70f4010ab4c33367",
        "order": 2,
        "width": 3,
        "height": "4",
        "gtype": "gauge-34",
        "gstyle": "needle",
        "title": "",
        "units": "ºC",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#5cd65c"
            },
            {
                "from": "20",
                "color": "#ffc800"
            },
            {
                "from": "50",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1020,
        "y": 100,
        "wires": []
    },
    {
        "id": "26c7cf130f9b7783",
        "type": "function",
        "z": "ad317ce82a8a2ae7",
        "name": "function 19",
        "func": "msg.payload = Math.random() * 100;\nmsg.topic = \"Temp 1\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 160,
        "wires": [
            [
                "762d28d666b7b8a2"
            ]
        ]
    },
    {
        "id": "0c7b27b8d0182ddd",
        "type": "function",
        "z": "ad317ce82a8a2ae7",
        "name": "function 20",
        "func": "msg.payload = Math.random() * 100;\nmsg.topic = \"Temp 2\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 200,
        "wires": [
            [
                "762d28d666b7b8a2"
            ]
        ]
    },
    {
        "id": "be75189d52060222",
        "type": "function",
        "z": "ad317ce82a8a2ae7",
        "name": "function 21",
        "func": "// Gerar um valor aleatório entre 0 e 100 para \"Temp 1\"\nmsg.payload = Math.random() * 100;\nmsg.topic = \"Liquido 1\"; // Define o tópico como \"Temp 1\"\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 460,
        "wires": [
            [
                "3334161936e18c21"
            ]
        ]
    },
    {
        "id": "f5c4fa25efc46bb3",
        "type": "function",
        "z": "ad317ce82a8a2ae7",
        "name": "function 22",
        "func": "// Gerar um valor aleatório entre 0 e 100 para \"Temp 2\"\nmsg.payload = Math.random() * 100;\nmsg.topic = \"Liquido 2\"; // Define o tópico como \"Temp 2\"\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 520,
        "wires": [
            [
                "3334161936e18c21"
            ]
        ]
    },
    {
        "id": "3334161936e18c21",
        "type": "ui-chart",
        "z": "ad317ce82a8a2ae7",
        "group": "4b95948c45e709f9",
        "name": "ChartLiquido",
        "label": "",
        "order": 1,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "time",
        "yAxisProperty": "",
        "ymin": "0",
        "ymax": "100",
        "action": "append",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": "30",
        "removeOlderUnit": "1",
        "removeOlderPoints": "",
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": "7",
        "height": "4",
        "className": "",
        "x": 910,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "2cae452dfdd5318c",
        "type": "function",
        "z": "ad317ce82a8a2ae7",
        "name": "LiquiVerm",
        "func": "// Esta função é chamada quando uma mensagem é recebida\nvar nivel = msg.payload; // Assume que o valor recebido é um número representando o nível de líquido\n\n// Verifica se o valor recebido é um número e se é menor que 500\nif (!isNaN(nivel) && nivel < 500) {\n    // Se o valor for menor que 500, acende a LED\n    msg.payload = true; // Sinaliza para acender a LED\n} else {\n    // Se o valor não for menor que 500, apaga a LED\n    msg.payload = false; // Sinaliza para apagar a LED\n}\n\n// Define o tópico para controlar a LED\nmsg.topic = \"topic/LED\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 480,
        "wires": [
            [
                "fd3b86f75c13a0e4"
            ]
        ]
    },
    {
        "id": "c7f71f32fe895e7c",
        "type": "function",
        "z": "ad317ce82a8a2ae7",
        "name": "LiquiVerd",
        "func": "// Esta função é chamada quando uma mensagem é recebida\nvar nivel = msg.payload; // Assume que o valor recebido é um número representando o nível de líquido\n\n// Verifica se o valor recebido é um número e se é maior que 500\nif (!isNaN(nivel) && nivel > 500) {\n    // Se o valor for maior que 500, acende a LED\n    msg.payload = true; // Sinaliza para acender a LED\n} else {\n    // Se o valor não for maior que 500, apaga a LED\n    msg.payload = false; // Sinaliza para apagar a LED\n}\n\n// Define o tópico para controlar a LED\nmsg.topic = \"topic/LED\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 440,
        "wires": [
            [
                "dea5ea40bea63824"
            ]
        ]
    },
    {
        "id": "c56e1e2abe0d293c",
        "type": "function",
        "z": "e1d7f2d534b1a359",
        "name": "function 16",
        "func": "// Extrair o valor de msg.payload\nvar value = msg.payload.value;\n\n// Atribuir apenas o valor ao payload\nmsg.payload = value;\n\n// Retornar a mensagem com o valor ajustado\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "0d2843b9d6f81c9b",
        "type": "mqtt in",
        "z": "e1d7f2d534b1a359",
        "name": "",
        "topic": "esp32/pub/liquido",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "a08de68dd8c3c8b9",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 460,
        "wires": [
            [
                "20f624eccb5634b3"
            ]
        ]
    },
    {
        "id": "a122fae42289ce89",
        "type": "function",
        "z": "e1d7f2d534b1a359",
        "name": "function 17",
        "func": "// Verifica se a mensagem contém a propriedade 'value' e se é um número\nif (msg.payload && typeof msg.payload.value === 'number') {\n    // Retorna apenas o valor\n    return { payload: msg.payload.value };\n} else {\n    // Se não houver 'value' na mensagem ou se não for um número, retorna uma mensagem de erro\n    return { error: \"Valor não encontrado na mensagem\" };\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "6e6b03d62a5a553f",
        "type": "mqtt in",
        "z": "e1d7f2d534b1a359",
        "name": "",
        "topic": "esp32/pub/temperatura",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "a08de68dd8c3c8b9",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 260,
        "wires": [
            [
                "c4095758f4be5849"
            ]
        ]
    },
    {
        "id": "20f5cc31f78d87be",
        "type": "debug",
        "z": "e1d7f2d534b1a359",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 200,
        "wires": []
    },
    {
        "id": "c4095758f4be5849",
        "type": "csv",
        "z": "e1d7f2d534b1a359",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "value,timestamp",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 480,
        "y": 260,
        "wires": [
            [
                "319e920d213456a5"
            ]
        ]
    },
    {
        "id": "16195a835b10e6bd",
        "type": "mysql",
        "z": "e1d7f2d534b1a359",
        "mydb": "d4ba1d99346adfe8",
        "name": "SQL",
        "x": 860,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "0b334a6fb7446e2a",
        "type": "function",
        "z": "e1d7f2d534b1a359",
        "name": "SQL",
        "func": "// Extrair o valor e o carimbo de data/hora do resultado da consulta\nvar value = msg.payload.value;\nvar timestamp = msg.payload.timestamp;\n\n// Criar um novo objeto para conter value e timestamp\nmsg.payload = {\n    value: value,\n    timestamp: timestamp\n};\n\n// Retornar a mensagem ajustada\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 460,
        "wires": [
            [
                "a122fae42289ce89"
            ]
        ]
    },
    {
        "id": "20f624eccb5634b3",
        "type": "csv",
        "z": "e1d7f2d534b1a359",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "value,timestamp",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 460,
        "y": 460,
        "wires": [
            [
                "0b334a6fb7446e2a"
            ]
        ]
    },
    {
        "id": "0dae4d1bb0d2e4b3",
        "type": "mysql",
        "z": "e1d7f2d534b1a359",
        "mydb": "d4ba1d99346adfe8",
        "name": "SQL",
        "x": 740,
        "y": 460,
        "wires": [
            [
                "51c4cb7816bdbce2"
            ]
        ]
    },
    {
        "id": "319e920d213456a5",
        "type": "function",
        "z": "e1d7f2d534b1a359",
        "name": "SQLT",
        "func": "var value = msg.payload.value;\nvar timestamp = msg.payload.timestamp;\nvar sensor = \"TEMPERATURA\"; \nvar location = \"LAB\";\n\n// Montar o objeto payload com os dados\nmsg.payload = {\n    value: value,\n    timestamp: timestamp,\n    location: location,\n    sensor: sensor\n};\n\n// Definir a consulta SQL para buscar os dados do banco de dados\nmsg.topic = \"SELECT value, timestamp FROM senordata ORDER BY id DESC LIMIT 1\";\n\n// Retornar a mensagem para o próximo nó no fluxo\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 260,
        "wires": [
            [
                "16195a835b10e6bd",
                "38b6f01d418ca80d"
            ]
        ]
    },
    {
        "id": "51c4cb7816bdbce2",
        "type": "function",
        "z": "e1d7f2d534b1a359",
        "name": "RETORNO-L",
        "func": "// Extrair o valor e o carimbo de data/hora do resultado da consulta\nvar value = msg.payload[0].value;\nvar timestamp = msg.payload[0].timestamp;\n\n// Criar um novo objeto para conter value e timestamp\nmsg.payload = {\n    value: value,\n    timestamp: timestamp\n};\n\n// Retornar a mensagem ajustada\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "c85c770e646e7b1c",
        "type": "function",
        "z": "e1d7f2d534b1a359",
        "name": "RETORNO-T",
        "func": "// Supondo que os dados estejam em msg.payload\nvar values = [];\nvar timestamps = [];\n\n// Verificar se msg.payload está definido e não é vazio\nif (msg.payload && msg.payload.length > 0) {\n    // Percorrer os objetos em msg.payload e extrair os valores e timestamps\n    msg.payload.forEach(function(item) {\n        values.push(item.value);\n        timestamps.push(new Date(item.timestamp).getTime());\n    });\n}\n\n// Formatar os dados no formato adequado para o nó do gráfico\nvar chartData = [{\n    series: [\"Value\"],\n    data: [values],\n    labels: timestamps\n}];\n\n// Passar os dados formatados para o nó do gráfico\nmsg.payload = chartData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "38b6f01d418ca80d",
        "type": "function",
        "z": "e1d7f2d534b1a359",
        "name": "function 18",
        "func": "// Verifica se a mensagem contém a propriedade 'value' e se é um número\nif (msg.payload && typeof msg.payload.value === 'number') {\n    // Retorna apenas o valor\n    return { payload: msg.payload.value };\n} else {\n    // Se não houver 'value' na mensagem ou se não for um número, retorna uma mensagem de erro\n    return { error: \"Valor não encontrado na mensagem\" };\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "e85a3a1007424ea3",
        "type": "ui_led",
        "z": "e1d7f2d534b1a359",
        "order": 0,
        "group": "ui_group",
        "width": 0,
        "height": 0,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "red",
                "value": false,
                "valueType": "bool"
            },
            {
                "color": "green",
                "value": true,
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 650,
        "y": 80,
        "wires": []
    }
]